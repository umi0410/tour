흐름 제어 구문: for, if, else, switch 그리고 defer
당신의 흐름을 조건문과 반복문, switch, defer로 제어하는 방법을 배우십시오.

The Go Authors
https://golang.org

* For

Go는 for 반복문이라는 단 하나의 반복 구조를 가집니다.

기본적인 for 반복문의 `;` 으로 구별되는 세 가지 구성 요소를 갖습니다.

- 초기화 구문: 첫 번째 iteration 전에 수행됩니다.

- 조건 표현: 매 모든 iteration 이전에 판별됩니다.

- 사후 구문: 매 iteration 마지막에 수행됩니다. 

초기화 구문은 주로 짧은 변수 선언일 것이며, 거기서 선언된 변수들은 for문의 스코프 내에서만 보여집니다.

반복문은 조건 판별의 boolean 값이 `false` 이면 iterating을 종료할 것 입니다.

*주의:* C나 Java, JavaScript와 같은 다른 언어들과 달리, Go는 for문의 세 가지 구성 요소를 감싸는 괄호가 없고, 
`{`}` 괄호가 항상 필수입니다.

.play flowcontrol/for.go

* 이어서 For

초기화 구문과 사후 구문은 필수는 아닙니다.

.play flowcontrol/for-continued.go

* For는 Go의 "while"

당신이 `;` 을 생략할 수 있다는 점에서 C의 `while` 은 Go에서 `for` 로 쓰입니다.

.play flowcontrol/for-is-gos-while.go

* 영원한 For

만약 당신이 그것이 영원한 반복문에서 반복 조건을 생략한다면, 그것을 통해 무한 루프 또한 간편히 표현될 수 있습니다.

.play flowcontrol/forever.go

* If

Go의 `if` 문은 `for` 반복문과 비슷합니다. 그 표현은 `(`)` 괄호로 둘러쌓일 필요는 없지만, `{`}` 괄호는 필수입니다.

.play flowcontrol/if.go

* 짧은 구문의 If

`for` 과 마찬가지로, `if` 문 또한 조건문 전에 수행될 짧은 구문으로 시작될 수 있습니다.

그 짧은 구문에서 선언된 변수들은 오직 `if` 문의 끝까지만 스코프가 존재합니다.

(마지막 `return` 문에서 `v` 를 사용해보십시오.)

.play flowcontrol/if-with-a-short-statement.go

* If와 else

짧은 `if` 문 안에서 선언된 변수들은 어떠한 `else` 블럭에서든 사용이 가능합니다.

`pow` 에 대한 두 가지 호출 모두 `main` 의 시작 부분에서 `fmt.Println` 에 대한 호출하기 이전에 그들의 결과를 반환합니다.

.play flowcontrol/if-and-else.go

* 실습: 반복문과 함수

함수와 반복문을 가지고 노는 방법으로서 제곱근 함수를 도입해봅시다: x라는 숫자가 주어졌을 때, 우리는 z²이 x에 가장 가까운 숫자 z를 찾아낼 것입니다.

컴퓨터는 주로 x의 제곱근을 반복문을 사용해 연산합니다.
어떠한 추측 값 z로부터 시작해, 우리는 z²가 x에 얼마나 가까운 가를 근거로 z의 더 좋은 값을 추정합니다.

	z -= (z*z - x) / (2*z)

이러한 조정을 반복함으로써 우리가 최대한 실제 제곱근에 가까운 정답에 도달할 때까지 추측은 점점 더 정확해집니다.

주어진 `func` `Sqrt` 에 이것을 도입하십시오.
입력값이 어떻든 간에 z = 1이라는 괜찮은 가정에서 시작합니다.
시작과 함께 계산을 10회 반복하고 그에 따른 각각의 z의 값을 출력하세요.
당신이 x의 다양한 값(1, 2, 3, ...)에 얼마나 가까워지는 지 그리고 얼마나 빠르게 추측이 개선되는 지 보세요.

힌트: 실수값을 선언하고 초기화하는 방법 - 값에 소수점을 입력해주거나 변환식을 사용하세요.

	z := 1.0
	z := float64(1)

다음으로 한 번 변수가 변경되기를 멈추었거나 매우 작은 양만 변화만 존재할 경우 반복문의 조건을 변경하십시오.
10회의 iteration보다 많은 지 적은 지 보십시오. 
z에 대한 초기 추측으로 x나 x/2 같은 다른 값들을 시도해보십시오.
당신의 함수의 결과가 표준 라이브러리인 [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]의 결과에 얼마나 가까운가요?


(참고 : 알고리즘의 세부 사항에 관심이 있으신 분들을 위해:

위의 z² − x는 z²가 되어야할 값 (x)과 얼마나 차이나는 지를 나타내고, 2z로 나누는 것은 z²가 얼마나 빨리 변하는 지에 따라 z를 조정하기 위한 z²의 미분입니다.
이 일반적인 접근 방식을 Newton's method라고합니다. 많은 함수에서도 잘 작동하지만 특히 제곱근에서는 잘 작동합니다.)

.play flowcontrol/exercise-loops-and-functions.go

* Switch

`switch` 구문은 연속적인 `if`-`else` 구문을 사용하는 짧은 방안입니다.
그것은 값이 조건문과 같은 첫 번째 case를 실행합니다.

Go의 switch는 Go는 뒤이어 오는 모든 case를 실행하는 것이 아니라
오직 첫 번째 선택된 케이스만을 실행한다는 점을 제회하고는 C와 C++, Java, Javascript, PHP와 유사합니다.
효과적으로, `break` 구문은 위의 언어들에서는 각 case의 끝 부분에 필요하지만, Go에서는 자동으로 break가 제공됩니다.
다른 중요한 차이점은 Go의 switch case는 상수일 필요가 없으며 그 값들은 정수일 필요도 없습니다.

.play flowcontrol/switch.go

* Switch 평가 순서

Switch case는 하나의 케이스라도 성공하면 멈추는 식으로 위에서부터 아래로 case를 평가합니다.

(예를 들어, 만약 `i==0` 라면 f를 호출하지 않습니다.)

	switch i {
	case 0:
	case f():
	}

#appengine: *주의:* Go playground에서의 시간은 항상 2009-11-10 23:00:00 UTC에 시작하는 것으로 보여집니다. 
#appengine: 이 값의 가치는 독자들의 실습으로 남겨져있습니다.

.play flowcontrol/switch-evaluation-order.go

* 조건이 없는 Switch

조건이 없는 Switch는 `switch`true` 와 동일합니다.

이 구조는 긴 if-else 체인을 작성하는 데에 아주 깔끔한 방식일 수 있습니다.

.play flowcontrol/switch-with-no-condition.go

* Defer

defer문은 자신을 둘러싼 함수가 종료할 때까지 어떠한 함수의 실행을 연기합니다

연기된 호출의 인자는 즉시 평가되지만 그 함수 호출은 자신을 둘러싼 함수가 종료할 때까지 수행되지 않습니다.

.play flowcontrol/defer.go

* defer 스택 쌓기

연기된 함수 호출들은 스택에 쌓입니다. 한 함수가 종료될 때 그것의 연기된 함수들은 후입선출 순서로 수행됩니다.

defer문에 대해 더 알고 싶다면 [[https://blog.golang.org/defer-panic-and-recover][이 블로그 글]]을 읽어보십시오.


.play flowcontrol/defer-multi.go

* 축하드립니다!

당신은 이번 강의를 완료하였습니다!

당신은 다음에 무엇을 배울 지 확인하기 위해 [[/list][단원]]의 목록을 보러 돌아갈 수도 있고, [[javascript:click('.next-page')][다음]]를 통해 강의를 계속해나갈 수도 있습니다.