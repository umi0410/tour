패키지와 변수, 함수
모든 Go 프로그램의 기본 구성요소들에 대해 배워보십시오.

The Go Authors
https://golang.org

* 패키지

모든 Go 프로그램은 패키지로 구성되어있습니다.

프로그램은 `main` 패키지에서 실행을 시작합니다.

이 프로그램은 import 경로 `"fmt"` 와 `"math/rand"` 로 패키지를 사용합니다.

관습적으로, 패키지의 이름은 import 경로의 마지막 요소와 같습니다. 예를 들어 `"math/rand"` 패키지는 `package`rand` 문으로 시작하는 파일들로 구성되어있습니다.

#appengine: *주의:* 이 프로그램들이 실행되는 환경은 결정론적입니다. 따라서 당신이 이 예제 프로그램 실행할 때마다 `rand.Intn` 는 같은 숫자를 반환할 것입니다.
#appengine:
#appengine: (다른 숫자를 보기 위해서는 number generator에 seed를 설정하십시오.
#appengine: playground 내에서는 Time은 상수이므로 당신은 seed로서 시간이 아닌 무언가를 사용해야 할 것입니다.

.play basics/packages.go

* Import

오른쪽의 코드는 괄호로 `import` 를 그룹 짓습니다. 이를 "factored" import 문이라고합니다.

당신은 여러 import문들을 다음과 같이 적을 수도 있습니다.

	import "fmt"
	import "math"

하지만 위의 방식보다는 오른쪽처럼 "factored" import문을 사용하는 것이 좋은 스타일입니다.

.play basics/imports.go

* Export되는 이름

Go에서는 대문자로 시작하는 이름이 export 됩니다.
예를 들어 `Pi` 가 `math` 패키지에서 export 되었듯이 `Pizza` 는 export되는 이름입니다.

`pizza` 와 `pi` 대문자로 시작하지 않으르모 export되지 않습니다.

pacakge를 import 할 때, 당신은 그 패키지의 export된 이름들만 참조할 수 있습니다.
export되지 않은 이름들에는 패키지의 밖에서 접근할 수 없습니다.

코드를 실행해보십시오. 에러메시지를 보십시오.

에러를 고치기 위해서는 `math.pi` 를 `math.Pi` 로 변경하시고, 다시 시도해보십시오.

.play basics/exported-names.go

* 함수

함수는 0개 혹은 그보다 많이 인자를 받을 수 있습니다.

이번 예시에서 `add` 는 2개의 `int` 형 매개변수를 이용합니다.

변수 이름 _뒤에_ type 이 온다는 것을 명심하세요.

(type이 왜 그런 방식으로 보여지는 지에 대한 자세한 내용은 [[https://blog.golang.org/gos-declaration-syntax][Go의 선언 syntax에 대한 글]]에서 확인해보십시오.)

.play basics/functions.go

* 이어서 Function

두 개 이상의 연속된 이름이 주어진 함수 매개변수가 같은 type일 때 당신은 마지막 매개변수를 제외한 매개변수들의 type을 생략할 수 있습니다.

이번 예제에서는 우리는 다음을

	x int, y int

이렇게 줄였습니다.

	x, y int

.play basics/functions-continued.go

* 복수개의 결과

한 함수는 몇 개의 결과든 반환할 수 있습니다.

`swap` 함수는 두 개의 string을 반환합니다.

.play basics/multiple-results.go

* 이름이 주어진(기명의) 반환 값

Go의 반환 값은 이름이 정해질 수도 있습니다. 그 경우, 함수의 맨 위에서 정의된 변수처럼 다뤄집니다.

이러한 이름들은 반환 값의 의미를 설명하는 데에 사용되어야합니다.

인자가 없는 `return` 문은 이름이 주어진 반환 값을을 반환합니다. 이것을 "naked" return 이라고 합니다.

여기 이 예제에서처럼 naked return문은 짧은 함수에서만 사용되어야합니다.
긴 함수에서는 그것이 가독성을 떨어뜨릴 수 있습니다.

.play basics/named-results.go

* 변수

`var` 문은 변수에 대한 목록을 선언합니다. 함수 인자의 목록이 그랬듯, 마지막은 type입니다.

`var` 문은 package나 함수 단에 존재할 수 있습니다. 이 예제를 통해 두 경우 모두를 살펴봅시다.

.play basics/variables.go

* 변수 초기화

변수 선언은 한 변수 당 하나의 초깃값을 포함할 수 있습니다.

만약 초깃값이 존재한다면, type은 생략될 수 있습니다. 이 경우, 변수는 초깃값의 type을 취합니다.

.play basics/variables-with-initializers.go

* 짧은 변수 선언

함수 내에서는 `:=` 라는 짧은 변수 선언은 암시적 type으로 `var` 선언처럼 사용될 수 있습니다.

함수 밖에서는 모든 선언이 키워드(`var`, `func`, 기타 등등)로 시작하므로 `:=` 구문은 사용할 수 없습니다.

.play basics/short-variable-declarations.go

* 기본 자료형

고의 기본 type들은 다음과 같습니다.

    bool

    string

    int  int8  int16  int32  int64
    uint uint8 uint16 uint32 uint64 uintptr

    byte // uint8의 별칭

    rune // int32의 별칭
         // 유니코드에서 code point를 의미합니다.

    float32 float64

    complex64 complex128

이 예시는 몇 가지 type의 변수를 보여줄 것이고, 그 변수 선언들은 import 문과 마찬가지로 조각으로 쪼개질 수 있습니다.

`int` 와 `uintptr` type은 보통 32-bit 시스템에서는 32 bit, 64-bit 시스템에서는 64 bit의 길이입니다.
정수 값이 필요할 때에는 특정한 이유로 크기를 정해야하거나 unsigned 정수 type을 사용해야하는 게 아니라면 `int` 를 사용해야합니다.

.play basics/basic-types.go

* Zero values

명시적인 초깃값 없이 선언된 변수는 그것의 _zero_value_ 가 주어집니다.

`zero`value` 는 다음과 같습니다.

- 숫자 type에는 0
- boolean type에는 false
- string에는 "" (빈 문자열)

* Type 변환

`T(v)` 는 `v` 라는 값을 T type으로 변환시켜줍니다.

몇 가지 숫자 변환 예시:

    var i int = 42
    var f float64 = float64(i)
    var u uint = uint(f)

혹은 좀 더 간단히:

    i := 42
    f := float64(i)
    u := uint(f)

C와 달리 Go는 다른 type의 요소들 간의 할당에는 명시적인 변환을 필요로합니다.
예시에서 `float64` 나 `uint` 변환을 제거해보시고, 어떤 일이 발생하는 지 보십시오.

.play basics/type-conversions.go

* Inference type

`:=` 혹은 `var`=` 표현을 이용해 명시적인 type을 정의하지 않고 변수를 선언할 때, 그 변수 type은 오른 편에 있는 값으로부터 유추됩니다.

변수 선언의 오른 쪽에 무언가 적힐 때, 새로운 변수는 그것과 같은 type이 됩니다.

    var i int
    j := i // j 는 int

하지만, 오른 편에 type이 정해지지 않은 숫자 상수가 올 때, 새 변수는 그 상수의 정확도에 따라 `int` 혹은 `float64`, `complex128` 이 됩니다.

    i := 42           // int
    f := 3.142        // float64
    g := 0.867 + 0.5i // complex128

예시에서 `v` 의 초깃값을 바꿔보시고 `v` 의 type에 어떤 영향을 끼치는 지 보십시오.

.play basics/type-inference.go

* 상수

상수는 변수처럼 선언되지만 `const` 키워드와 함께 선언됩니다.

상수는 `character` 혹은 `string`, `boolean`, 숫자 값이 될 수 있습니다.

상수는 `:=` 를 통해 선언될 수 없습니다.

.play basics/constants.go

* Numeric Constants

숫자형 상수
숫자형 상수는 매우 정확한 _값_ 입니다.

type이 정해지지 않은 상수는 그것의 문맥에서 필요한 type을 취합니다.

`needInt(Big)` 을 출력해보세요.

(`int` 는 최대 64-bit 혹은 때때로 더 작은 정수를 저장할 수 있습니다.)

.play basics/numeric-constants.go

* Congratulations!
축하드립니다!
당신은 이번 강의를 마쳤습니다!

다음에 무엇을 배울 지 보러 [[/list][단원]]의 목록으로 돌아가실 수도 있고, [[javascript:click('.next-page')][다음]]으로 강의를 이어가실 수도 있습니다.
