더 많은 타입들: struct와 slice, map
존재하는 타입을 기반으로 타입들을 정의하는 방법을 배워보십시오: 이번 강의는 struct와 array, slice, map을 다룹니다.

The Go Authors
https://golang.org

* Pointers (포인터)

Go는 포인터를 지원합니다.
포인터는 값의 메모리 주소를 가지고 있습니다.

`*T` 타입은 `T` 값을 가리키는 포인터입니다. 이것의 zero value는 `nil` 입니다.

	var p *int

`&` 연산자는 이것의 피연산자에 대한 포인터를 생성합니다.

	i := 42
	p = &i

`*` 연산자는 포인터가 가리키는 주소의 값을 나타냅니다.

	fmt.Println(*p) // 포인터 p를 통해 i 읽기
	*p = 21         // 포인터 p를 통해 i 설정

이것은 "역 참조" 또는 "간접 참조"로 알려져 있습니다.

C언어와는 다르게, Go는 포인터 산술을 지원하지 않습니다. (역자: 포인터 산술 연산이란 포인터가 가리키는 주소값에 대한 산술 연산을 의미합니다.)

.play moretypes/pointers.go

* Structs (구조체)

구조체는 필드의 집합체입니다.

.play moretypes/structs.go

* Struct Fields

구조체의 필드는 `.` 즉 온점으로 접근할 수 있습니다.

.play moretypes/struct-fields.go

* Pointers to structs

구조체 포인터를 통해서 구조체 필드를 접근할 수 있습니다.

`(*p).X` 로 작성하면, 구조체 포인터 `p` 에서 구조체의 `X` 필드에 접근할 수 있습니다.

그러나 위 표기법은 번거로울 수 있습니다. 따라서 이 언어는 역 참조를 명시할 필요 없이 `p.X` 로 작성할 수 있습니다.

.play moretypes/struct-pointers.go

* Struct Literals

구조체 리터럴은 필드 값을 나열하여 새로 할당된 구조체 값을 나타냅니다.

`Name:` 구문으로 필드의 하위 집합만 나열할 수 있습니다. (명명된 필드의 순서는 무관합니다.)

특별한 접두사 `&` 은 구조체 값으로 포인터를 반환합니다. 

.play moretypes/struct-literals.go


* Arrays (배열)

`[n]T` 타입은 타입이 T인 n 값들의 배열입니다. 

	var a [10]int

위 표현은 변수 a를 10개의 정수들의 배열로 선언한 것입니다.

배열의 길이는 그 타입의 일부입니다. 따라서 배열의 크기를 조정할 수 없습니다.
제약이 많을 것 같지만, 걱정하지 마세요!
Go는 배열로 작업할 수 있는 편리한 방법을 제공합니다.

.play moretypes/array.go


* Slices (슬라이스)

배열은 고정된 크기를 가지고 있습니다.
반면에, 슬라이스는 배열의 요소들을 동적인 크기로, 유연하게 볼 수 있습니다. 
실제로, 슬라이스는 배열보다 훨씬 흔합니다.

`[]T` 타입은 `T` 타입을 원소로 가지는 슬라이스입니다.

슬라이스는 콜론으로 구분된 두 개의 인덱스(하한과 상한)를 지정하여 형성됩니다. 

	a[low : high]


이것은 첫 번째 요소를 포함하지만 마지막 요소를 제외하는 범위를 선택합니다.


아래 표현은 a의 첫번째부터 세번째 요소를 
포함하는 슬라이스를 생성합니다. 


	a[1:4]

.play moretypes/slices.go


* Slices are like references to arrays (배열을 참조하는 슬라이스)

슬라이스는 어떤 데이터도 저장할 수 없습니다.
이것은 단지 기본 배열의 한 영역을 나타낼 뿐입니다.

슬라이스의 요소를 변경하면 기본 배열의 해당 요소가 수정됩니다.

동일한 기본 배열을 공유하는 다른 슬라이스는 이러한 변경사항을 볼 수 있습니다.

.play moretypes/slices-pointers.go


* Slice literals (슬라이스 리터럴)

슬라이스 리터럴은 길이가 없는 배열 리터럴와 같습니다.


아래는 배열 리터럴입니다.

	[3]bool{true, true, false}

이렇게 하면 위와 동일한 배열이 생성되고,
이를 참조하는 슬라이스가 만들어집니다.

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice defaults (슬라이스 기본 값)

상한 또는 하한을 생략하면, 슬라이싱할 때 기본 값을 사용할 수 있습니다.
하한의 경우 기본 값은 0이고, 상한의 경우 슬라이스의 길이입니다.


	var a [10]int

위 배열에서 아래 슬라이스 표현식들은
전부 동일한 의미입니다.

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Slice length and capacity (슬라이스의 길이와 용량)

슬라이스는 _length(길이)_ 와 _capacity(용량)_ 를 둘다 가지고 있습니다.

슬라이스의 길이란 슬라이스가 포함하는 요소의 개수입니다.

슬라이스의 용량이란 슬라이스의 첫 번째 요소부터 계산하는 
기본 배열의 요소의 개수입니다. 

슬라이스 `s` 의 길이와 용량은 `len(s)` 와 `cap(s)` 식으로 얻을 수 있습니다.

슬라이스의 길이를 연장하기 위해서는 슬라이스에 충분한 용량이 있을 때, 
다시 슬라이싱을 하면 됩니다.  
예제의 슬라이스 작업중 하나를 슬라이스의 용량을 넘어가도록 변경하여
어떤 일이 발생하는지 확인해 보세요.   


.play moretypes/slice-len-cap.go


* Nil slices (nil 슬라이스)

슬라이스의 zero value는 `nil` 입니다.

nil 슬라이스의 길이와 용량은 0이며, 기본 배열을 가지고 있지 않습니다.

.play moretypes/nil-slices.go


* Creating a slice with make (make 함수로 슬라이스 만들기)

슬라이스는 내장된 `make` 함수로 생성할 수 있습니다.
이것은 동적 크기의 배열을 생성하는 방법입니다.

`make` 함수는 0으로 이루어진 배열을 할당합니다.
그리고 해당 배열을 참조하는 슬라이스를 반환합니다.

	a := make([]int, 5)  // len(a)=5

용량을 지정하려면, `make` 함수의 세 번째 인자에 값을 전달하면 됩니다.

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices of slices (슬라이스의 슬라이스)

슬라이스는 다른 슬라이스를 포함하여 모든 타입을 담을 수 있습니다. 

.play moretypes/slices-of-slice.go


* Appending to a slice (슬라이스에 요소 추가하기)

슬라이스에 새로운 요소를 추가하는 것이 일반적입니다.
따라서 Go는 내장된 `append` 함수를 제공합니다.
[[https://golang.org/pkg/builtin/#append][문서]]에 `append` 내장 함수의 설명이 있습니다.

	func append(s []T, vs ...T) []T

`append` 의 첫번째 파라미터 `s` 는 슬라이스의 타입 `T` 입니다.
그리고 나머지 `T` 값들은 슬라이스에 추가할 값들입니다.

`append` 의 결과 값은 원래 슬라이스의 모든 요소와 
추가로 제공된 값들을 포함하는 슬라이스입니다.

만약 `s` 의 원래 배열이 너무 작아서 주어진 값을 모두 추가할 수 없을 경우,
더 큰 배열이 할당됩니다. 이 때 반환된 슬라이스는 새로 할당된 배열을 가리킵니다.

(슬라이스에 대해 더 알고 싶다면 [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]] 글을 읽어보세요! )

.play moretypes/append.go


* Range

`for` 에서 `range` 는 슬라이스 또는 맵의 요소들을 순회합니다.

슬라이스에서 `range` 를 사용하면, 각 순회마다 두 개의 값이 반환됩니다.
첫 번째는 인덱스이고, 두 번째는 해당 인덱스 값의 복사본입니다.

.play moretypes/range.go

* Range continued

`_` 을 할당하여 인덱스 또는 값을 건너뛸 수 있습니다.

    for i, _ := range pow
    for _, value := range pow

만약 인덱스만을 원하면, 두 번째 변수를 생략할 수 있습니다.

    for i := range pow

.play moretypes/range-continued.go

* 슬라이스 연습하기

`Pic` 을 구현해봅시다. 이것은 `dy` 슬라이스의 길이와 `dx` 슬라이스의 각 요소를 8 비트 부호 없는 정수로 반환해야 합니다. 이 프로그램을 실행하면, 이것은 grayscale (well, bluescale) 값으로 변환된 그림을 보여줍니다.  

이미지의 선택은 여러분에게 달려 있습니다. 흥미로운 함수로 `(x+y)/2` , `x*y` , 그리고 `x^y` 를 제공합니다.

(루프를 사용하여 `[][]uint8` 안에 각 `[]uint8` 을 할당해야 합니다.)

(타입 간에 변환하려면 `uint8(intValue)` 을 사용하세요.)

.play moretypes/exercise-slices.go

* Maps (맵)

맵은 키를 값에 매핑합니다.

맵의 zero value는 `nil` 입니다.
`nil` 맵은 키도 없고, 키를 추가할 수도 없습니다.

`make` 함수는 주어진 타입의 
초기화되고 사용 준비가 된 맵을 반환합니다.


.play moretypes/maps.go

* 맵 리터럴

맵 리터럴은 구조체 리터럴과 같지만, 키가 필요합니다.

.play moretypes/map-literals.go

* 계속해서, 맵 리터럴

최상위 타입이 타입 이름일 경우, 리터럴의 요소에서 생략할 수 있습니다.

.play moretypes/map-literals-continued.go

* Mutating Maps

`m` 맵에 요소를 추가하거나 업데이트하기: 

	m[key] = elem

요소 검색하기:

	elem = m[key]

요소 제거하기:

	delete(m, key)

두 개의 값을 할당하여 키가 존재하는지 테스트할 수 있습니다.

	elem, ok = m[key]

만약 `key` 가 `m` 안에 있다면, `ok` 는 `true` 입니다. 아니라면, `ok` 는 `false` 입니다.

만약 `key` 가 맵 안에 없다면, `elem` 은 map의 요소 타입의 zero value입니다.

*참고:* 만약 `elem` 또는 `ok` 가 아직 선언되지 않았다면, 아래와 같은 짧은 정의식을 사용할 수 있습니다.

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* 맵 연습하기

`WordCount` 를 구현해봅시다. 이것은 문자열 `s` 의 각 `word` 의 개수의 맵을 반환해야 합니다. `wc.Test` 함수는 제공된 함수를 테스트하고 성공 혹은 실패를 출력하는 함수입니다.
[[https://golang.org/pkg/strings/#Fields][strings.Fields]]가 도움이 될 수 있습니다.

.play moretypes/exercise-maps.go

* Function values (함수 값)

함수들도 값입니다. 그것들은 다른 값들과 마찬가지로 전달될 수 있습니다.

함수 값은 함수의 인수나 반환 값으로 사용될 수 있습니다.

.play moretypes/function-values.go

* Function closures (함수 클로저)

Go 함수들은 클로저일 수도 있습니다. 클로저는 함수의 외부로부터 오는 변수를 참조하는 함수 값입니다. 함수는 참조된 변수에 접근하여 할당될 수 있습니다. 이러한 의미에서 함수는 변수에 "bound(바운드)" 됩니다.
그 예로, `adder` 함수는 클로저를 반환합니다. 각 클로저는 그 자체의 `sum` 변수에 bound(바운드) 되어 있습니다.

.play moretypes/function-closures.go

* Fibonacci closure (피보나치 클로저) 연습하기

한 재밌는 함수를 알아봅시다.

`fibonacci` 함수를 구현합니다. 이것은 연속적인 [[https://ko.wikipedia.org/wiki/%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98_%EC%88%98][피보나치 수]](0, 1, 1, 2, 3, 5, ...)를 반환하는 함수(클로저) 입니다.



.play moretypes/exercise-fibonacci-closure.go

* 축하드립니다!

이번 단원을 완료하셨습니다!

다음에 무엇을 배울 지 확인하기 위해 [[/list][modules]] 목록을 보러 돌아갈 수도 있습니다. 또는 [[javascript:click('.next-page')][다음 강의]]에서 계속해 나갈 수도 있습니다.
